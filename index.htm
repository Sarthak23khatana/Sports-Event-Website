<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IDSE</title>
    <link rel="stylesheet" href="css/style.css">
    <!-- Compiled and minified CSS -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-rc.2/css/materialize.min.css">
   <!--font-->
   <link href="https://fonts.googleapis.com/css?family=Quicksand" rel="stylesheet">
   <!--icons-->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!--typed.js-->
    <script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.9"></script>
  </head>
  <body>
    <!--Landing page-->
    <div class="row">
      <div class="col s12 m12 l12 LandingBg center-align">
        <h3 class="center-align" id="Main_text"><div class="typing-animation"><!--typed.js-->
            <span id="quote"></span></div></h3>

        <a class="waves-effect btn-small pulse Register_btn" id="main_btn" href="#REGISTERbUTTON">Register</a>
      </div>
    </div>
    <!--about idse-->
    <div class="row">
      <div class="card-panel col s12 m10 l10 offset-l1 offset-m1 grey darken-4 white-text z-depth-3">
        <h4 class="center-align">About</h4>
        <div class="divider"></div>
        <p class="about_text"><i class="SI">INTER-DEPARTMENTAL SPORTS EVENT (IDSE)</i> is the Annual Sports Meet of Ajay Kumar Garg Engineering College, Ghaziabad. The aim is to ensure the physical development of the students, along with the holistic and all-round development.
        The event comprises of the following 7 contingents: ME, CS, ECE, IT, EN, CE+EI, MBA+MCA.</p>
      </div>
    </div>

    <div class="divider"></div>
    <!--conveners-->
    <div class="row" id="first_row"><!--first row-->
      <div class="col s6 m7 offset-m1 l7 offset-l1 ">
        <h4 class="center-align" id="dean">Dean Students Welfare</h4>
      </div>
      <div class="col s6 m3 l3" >
        <div class="card z-depth-0 " id="Dean_card">
          <div class="card-image waves-effect waves-block waves-light">
            <img class="activator responsive-img" src="img/parashar.jpg">
          </div>
          <div class="card-content z-depth-1">
            <span class="card-title grey-text text-darken-4 center-align">Prof. V K Parashar<i class="material-icons right"></i></span>
          </div>
        </div>
      </div>
    </div>
    <div class="row"><!--second row-->
      <div class="col s12 m10 l10 offset-m1 offset-l1">
        <div class="row">
          <div class="col s12 m6 l6">
            <div class="row">
              <div class="col s6 m6 l6 ">
                <h6 class="center-align" id="dean">Sports Officer</h6>
              </div>
              <div class="col s6 m6 l6">
                <div class="card z-depth-0 RespMed">
                  <div class="card-image waves-effect waves-block waves-light">
                    <img class="activator responsive-img" src="img/Pratap.jpg">
                  </div>
                  <div class="card-content z-depth-1 center-align">
                    <span class="card-title activator grey-text text-darken-4">Mr. Pratap Singh</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col s12 m6 l6">
            <div class="row">
              <div class="col s6 m6 l6  ">
                <h6 class="center-align" id="dean">Organising Head</h6>
              </div>
              <div class="col s6 m6 l6">
                <div class="card z-depth-0 RespMed">
                  <div class="card-image waves-effect waves-block waves-light">
                    <img class="activator responsive-img" src="img/Pratap.jpg">
                  </div>
                  <div class="card-content z-depth-1 center-align">
                    <span class="card-title grey-text text-darken-4">XYZ</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row"><!--third row-->
      <div class="col s12 m10 l10 offset-m1 offset-l1">
        <div class="row">
          <div class="col s12 m6 l6">
            <div class="row">
              <div class="col s6 m6 l6 ">
                <h6 class="center-align" id="dean">College Captain(Boys)</h6>
              </div>
              <div class="col s6 m6 l6">
                <div class="card z-depth-0 RespMed">
                  <div class="card-image waves-effect waves-block waves-light">
                    <img class="activator responsive-img" src="img/Pratap.jpg">
                  </div>
                  <div class="card-content z-depth-1 center-align">
                    <span class="card-title activator grey-text text-darken-4">XYZ</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col s12 m6 l6">
            <div class="row">
              <div class="col s6 m6 l6  ">
                <h6 class="center-align" id="dean">College Captain(Girls)</h6>
              </div>
              <div class="col s6 m6 l6">
                <div class="card z-depth-0 RespMed">
                  <div class="card-image waves-effect waves-block waves-light">
                    <img class="activator responsive-img" src="img/Pratap.jpg">
                  </div>
                  <div class="card-content z-depth-1 center-align">
                    <span class="card-title grey-text text-darken-4">XYZ</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="divider"></div>

    <!--web team-->
    <div class="row grey darken-3" id="webteam_row"><!--next row-->
      <div class="col s12 m4 offset-m1 l4 offset-l1 ">
        <h5 class="center-align" id="dean">Web Team</h5>
      </div>
      <div class="col s6 m3 l3 "><!--Member1-->
        <div class="card RespMed SmallResp">
          <div class="card-image waves-effect ">
            <img class="activator responsive-img" src="img/tarun.jpg">
          </div>
          <div class="card-content white center-align">
            <span class="card-title activator grey-text text-darken-4">Tarun Gupta</span>
          </div>
        </div>
      </div>
      <div class="col s6 m3 l3 "><!--Member2-->
        <div class="card RespMed">
          <div class="card-image waves-effect">
            <img class="activator responsive-img" src="img/sarthak.jpg">
          </div>
          <div class="card-content white center-align">
            <span class="card-title activator grey-text text-darken-4">Sarthak khatana</span>
          </div>
        </div>
      </div>
    </div>
    <div class="divider"></div>
    <!--form-->
    <div class="row center-align" id="REGISTERbUTTON">
      <h5>Registration Form</h5>
    </div>
    <div class="container grey lighten-5">
    <div class="row" > <!--form content goes here-->
								    <form class="col s12">
								      <div class="row">
								        <div class="input-field col s8 offset-s2 grey-text lighten-2">
								          <i class="material-icons prefix">account_circle</i>
								           <input type="text">
								          <label for="name">Name</label>
								        </div>

								        <div class="input-field col s8 offset-s2 grey-text">
								          <i class="material-icons prefix">call</i>
								          <input type="tel" id="contact" class="validate" >
								          <label for="contact">Contact</label>
								        </div>
								        <div class="input-field col s8 offset-s2 grey-text">
								          <i class="material-icons prefix">person_pin</i>
								          <input type="text" id="studentNo" class="validate">
								          <label for="studentNo">Student no.</label>
								        </div>
								        <div class="input-field col s8 offset-s2 grey-text ">
								          <i class="material-icons prefix">domain</i>
								            <select >
										      <option value="" disabled selected>Branch</option>
										      <option value="1">CS</option>
										      <option value="2">IT</option>
										      <option value="3">ECE</option>
										      <option value="4">EI</option>
										      <option value="5">EN</option>
										      <option value="6">CE</option>
										      <option value="1">ME</option>
										      <option value="2">MCA</option>
										    </select>
								          <label for="branch">Branch</label>
								        </div>
								        <div class="input-field col s8 offset-s2 grey-text">
								          <i class="material-icons prefix">account_balance</i>
								            <select >
										      <option value="" disabled selected >Year</option>
										      <option value="1">I</option>
										      <option value="2">II</option>
										      <option value="3">III</option>
										      <option value="4">IV</option>
										    </select>
								          <label for="branch">Year</label>
								        </div>
								        <div class="input-field col s8 offset-s2 grey-text">
								          <i class="material-icons prefix">wc</i>
								            <select >
										      <option value="" disabled selected>Gender</option>
										      <option value="1">Male</option>
										      <option value="2">Female</option>
										    </select>
								        </div>
                        <div class="input-field col s8 offset-s2 grey-text">
                          <select multiple>
                            <option value="" disabled selected>Sport</option>
                            <option value="1">Cricket</option>
                            <option value="2">Football</option>
                            <option value="3">Badminton</option>
                            <option value="4">Athletics</option>
                            <option value="5">kabaddi</option>
                            <option value="6">Pool</option>
                            <option value="7">Power Lifting</option>
                            <option value="8">Valleyball</option>
                            <option value="9">Basketball</option>
                            <option value="10">Table Tennis</option>
                            <option value="11">Kho-Kho</option>
                            <option value="12">Tug of War</option>
                            <option value="13">Chess</option>
                            <option value="14">Carrom</option>
                            <option value="15">Obstacle Race</option>
                          </select>
                          <label>Interested Sports</label>
                        </div>
								        <div class=" col s8 offset-s2 grey-text">
								        	<p>
										      <label>
										        <input name="group1" type="radio" />
										        <span>Hosteler</span>
										      </label>
										    </p>
								        </div>
								        <div class="col s12 center-align">
								         <button class="btn waves-effect waves-light waves-effect Register_btn" type="submit" name="action">Register
										     <i class="material-icons right">send</i>
										     </button>
									     	</div>
								      </div>
								    </form>
    </div>
  </div>
    <!--powered by-->
    <div class="row grey darken-4 white-text" id="footer">
      <div class="right">powered by <b class="SI">SOFTWARE INCUBATOR</b></div>
    </div>
    <!--JavaScript at end of body for optimized loading-->
		<script src="https://code.jquery.com/jquery-3.3.1.min.js"
                integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
         <!-- Compiled and minified JavaScript -->

        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-rc.2/js/materialize.min.js"></script>
		 <script >
		 	 $(document).ready(function(){
   			 $('select').formSelect();
 			 });
		 </script>
     <script type="text/javascript">
     // The MIT License (MIT)

// Typed.js | Copyright (c) 2014 Matt Boldt | www.mattboldt.com

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.




! function($) {

   "use strict";

   var Typed = function(el, options) {

       // chosen element to manipulate text
       this.el = $(el);

       // options
       this.options = $.extend({}, $.fn.typed.defaults, options);

       // attribute to type into
       this.isInput = this.el.is('input');
       this.attr = this.options.attr;

       // show cursor
       this.showCursor = this.isInput ? false : this.options.showCursor;

       // text content of element
       this.elContent = this.attr ? this.el.attr(this.attr) : this.el.text()

       // html or plain text
       this.contentType = this.options.contentType;

       // typing speed
       this.typeSpeed = this.options.typeSpeed;

       // add a delay before typing starts
       this.startDelay = this.options.startDelay;

       // backspacing speed
       this.backSpeed = this.options.backSpeed;

       // amount of time to wait before backspacing
       this.backDelay = this.options.backDelay;

       // div containing strings
       this.stringsElement = this.options.stringsElement;

       // input strings of text
       this.strings = this.options.strings;

       // character number position of current string
       this.strPos = 0;

       // current array position
       this.arrayPos = 0;

       // number to stop backspacing on.
       // default 0, can change depending on how many chars
       // you want to remove at the time
       this.stopNum = 0;

       // Looping logic
       this.loop = this.options.loop;
       this.loopCount = this.options.loopCount;
       this.curLoop = 0;

       // for stopping
       this.stop = false;

       // custom cursor
       this.cursorChar = this.options.cursorChar;

       // shuffle the strings
       this.shuffle = this.options.shuffle;
       // the order of strings
       this.sequence = [];

       // All systems go!
       this.build();
   };

   Typed.prototype = {

       constructor: Typed

       ,
       init: function() {
           // begin the loop w/ first current string (global self.strings)
           // current string will be passed as an argument each time after this
           var self = this;
           self.timeout = setTimeout(function() {
               for (var i=0;i<self.strings.length;++i) self.sequence[i]=i;

               // shuffle the array if true
               if(self.shuffle) self.sequence = self.shuffleArray(self.sequence);

               // Start typing
               self.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);
           }, self.startDelay);
       }

       ,
       build: function() {
           var self = this;
           // Insert cursor
           if (this.showCursor === true) {
               this.cursor = $("<span class=\"typed-cursor\">" + this.cursorChar + "</span>");
               this.el.after(this.cursor);
           }
           if (this.stringsElement) {
               self.strings = [];
               this.stringsElement.hide();
               var strings = this.stringsElement.find('p');
               $.each(strings, function(key, value){
                   self.strings.push($(value).html());
               });
           }
           this.init();
       }

       // pass current string state to each function, types 1 char per call
       ,
       typewrite: function(curString, curStrPos) {
           // exit when stopped
           if (this.stop === true) {
               return;
           }

           // varying values for setTimeout during typing
           // can't be global since number changes each time loop is executed
           var humanize = Math.round(Math.random() * (100 - 30)) + this.typeSpeed;
           var self = this;

           // ------------- optional ------------- //
           // backpaces a certain string faster
           // ------------------------------------ //
           // if (self.arrayPos == 1){
           //  self.backDelay = 50;
           // }
           // else{ self.backDelay = 500; }

           // contain typing function in a timeout humanize'd delay
           self.timeout = setTimeout(function() {
               // check for an escape character before a pause value
               // format: \^\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^
               // single ^ are removed from string
               var charPause = 0;
               var substr = curString.substr(curStrPos);
               if (substr.charAt(0) === '^') {
                   var skip = 1; // skip atleast 1
                   if (/^\^\d+/.test(substr)) {
                       substr = /\d+/.exec(substr)[0];
                       skip += substr.length;
                       charPause = parseInt(substr);
                   }

                   // strip out the escape character and pause value so they're not printed
                   curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);
               }

               if (self.contentType === 'html') {
                   // skip over html tags while typing
                   var curChar = curString.substr(curStrPos).charAt(0)
                   if (curChar === '<' || curChar === '&') {
                       var tag = '';
                       var endTag = '';
                       if (curChar === '<') {
                           endTag = '>'
                       } else {
                           endTag = ';'
                       }
                       while (curString.substr(curStrPos).charAt(0) !== endTag) {
                           tag += curString.substr(curStrPos).charAt(0);
                           curStrPos++;
                       }
                       curStrPos++;
                       tag += endTag;
                   }
               }

               // timeout for any pause after a character
               self.timeout = setTimeout(function() {
                   if (curStrPos === curString.length) {
                       // fires callback function
                       self.options.onStringTyped(self.arrayPos);

                       // is this the final string
                       if (self.arrayPos === self.strings.length - 1) {
                           // animation that occurs on the last typed string
                           self.options.callback();

                           self.curLoop++;

                           // quit if we wont loop back
                           if (self.loop === false || self.curLoop === self.loopCount)
                               return;
                       }

                       self.timeout = setTimeout(function() {
                           self.backspace(curString, curStrPos);
                       }, self.backDelay);
                   } else {

                       /* call before functions if applicable */
                       if (curStrPos === 0)
                           self.options.preStringTyped(self.arrayPos);

                       // start typing each new char into existing string
                       // curString: arg, self.el.html: original text inside element
                       var nextString = curString.substr(0, curStrPos + 1);
                       if (self.attr) {
                           self.el.attr(self.attr, nextString);
                       } else {
                           if (self.isInput) {
                               self.el.val(nextString);
                           } else if (self.contentType === 'html') {
                               self.el.html(nextString);
                           } else {
                               self.el.text(nextString);
                           }
                       }

                       // add characters one by one
                       curStrPos++;
                       // loop the function
                       self.typewrite(curString, curStrPos);
                   }
                   // end of character pause
               }, charPause);

               // humanized value for typing
           }, humanize);

       }

       ,
       backspace: function(curString, curStrPos) {
           // exit when stopped
           if (this.stop === true) {
               return;
           }

           // varying values for setTimeout during typing
           // can't be global since number changes each time loop is executed
           var humanize = Math.round(Math.random() * (100 - 30)) + this.backSpeed;
           var self = this;

           self.timeout = setTimeout(function() {

               // ----- this part is optional ----- //
               // check string array position
               // on the first string, only delete one word
               // the stopNum actually represents the amount of chars to
               // keep in the current string. In my case it's 14.
               // if (self.arrayPos == 1){
               //  self.stopNum = 14;
               // }
               //every other time, delete the whole typed string
               // else{
               //  self.stopNum = 0;
               // }

               if (self.contentType === 'html') {
                   // skip over html tags while backspacing
                   if (curString.substr(curStrPos).charAt(0) === '>') {
                       var tag = '';
                       while (curString.substr(curStrPos).charAt(0) !== '<') {
                           tag -= curString.substr(curStrPos).charAt(0);
                           curStrPos--;
                       }
                       curStrPos--;
                       tag += '<';
                   }
               }

               // ----- continue important stuff ----- //
               // replace text with base text + typed characters
               var nextString = curString.substr(0, curStrPos);
               if (self.attr) {
                   self.el.attr(self.attr, nextString);
               } else {
                   if (self.isInput) {
                       self.el.val(nextString);
                   } else if (self.contentType === 'html') {
                       self.el.html(nextString);
                   } else {
                       self.el.text(nextString);
                   }
               }

               // if the number (id of character in current string) is
               // less than the stop number, keep going
               if (curStrPos > self.stopNum) {
                   // subtract characters one by one
                   curStrPos--;
                   // loop the function
                   self.backspace(curString, curStrPos);
               }
               // if the stop number has been reached, increase
               // array position to next string
               else if (curStrPos <= self.stopNum) {
                   self.arrayPos++;

                   if (self.arrayPos === self.strings.length) {
                       self.arrayPos = 0;

                       // Shuffle sequence again
                       if(self.shuffle) self.sequence = self.shuffleArray(self.sequence);

                       self.init();
                   } else
                       self.typewrite(self.strings[self.sequence[self.arrayPos]], curStrPos);
               }

               // humanized value for typing
           }, humanize);

       }
       /**
        * Shuffles the numbers in the given array.
        * @param {Array} array
        * @returns {Array}
        */
       ,shuffleArray: function(array) {
           var tmp, current, top = array.length;
           if(top) while(--top) {
               current = Math.floor(Math.random() * (top + 1));
               tmp = array[current];
               array[current] = array[top];
               array[top] = tmp;
           }
           return array;
       }

       // Start & Stop currently not working

       // , stop: function() {
       //     var self = this;

       //     self.stop = true;
       //     clearInterval(self.timeout);
       // }

       // , start: function() {
       //     var self = this;
       //     if(self.stop === false)
       //        return;

       //     this.stop = false;
       //     this.init();
       // }

       // Reset and rebuild the element
       ,
       reset: function() {
           var self = this;
           clearInterval(self.timeout);
           var id = this.el.attr('id');
           this.el.after('<span id="' + id + '"/>')
           this.el.remove();
           if (typeof this.cursor !== 'undefined') {
               this.cursor.remove();
           }
           // Send the callback
           self.options.resetCallback();
       }

   };

   $.fn.typed = function(option) {
       return this.each(function() {
           var $this = $(this),
               data = $this.data('typed'),
               options = typeof option == 'object' && option;
           if (!data) $this.data('typed', (data = new Typed(this, options)));
           if (typeof option == 'string') data[option]();
       });
   };

   $.fn.typed.defaults = {
       strings: ["These are the default values...", "You know what you should do?", "Use your own!", "Have a great day!"],
       stringsElement: null,
       // typing speed
       typeSpeed: 0,
       // time before typing starts
       startDelay: 0,
       // backspacing speed
       backSpeed: 0,
       // shuffle the strings
       shuffle: false,
       // time before backspacing
       backDelay: 500,
       // loop
       loop: false,
       // false = infinite
       loopCount: false,
       // show cursor
       showCursor: true,
       // character for cursor
       cursorChar: "<span class='cursor'>|</span>",
       // attribute to type (null == text)
       attr: null,
       // either html or text
       contentType: 'html',
       // call when done callback function
       callback: function() {},
       // starting callback function before each string
       preStringTyped: function() {},
       //callback for every typed string
       onStringTyped: function() {},
       // callback for reset
       resetCallback: function() {}
   };


}(window.jQuery);

/*
* rwdImageMaps jQuery plugin v1.5
*
* Allows image maps to be used in a responsive design by recalculating the area coordinates to match the actual image size on load and window.resize
*
* Copyright (c) 2013 Matt Stow
* https://github.com/stowball/jQuery-rwdImageMaps
* http://mattstow.com
* Licensed under the MIT license
*/
;(function(a){a.fn.rwdImageMaps=function(){var c=this;var b=function(){c.each(function(){if(typeof(a(this).attr("usemap"))=="undefined"){return}var e=this,d=a(e);a("<img />").load(function(){var g="width",m="height",n=d.attr(g),j=d.attr(m);if(!n||!j){var o=new Image();o.src=d.attr("src");if(!n){n=o.width}if(!j){j=o.height}}var f=d.width()/100,k=d.height()/100,i=d.attr("usemap").replace("#",""),l="coords";a('map[name="'+i+'"]').find("area").each(function(){var r=a(this);if(!r.data(l)){r.data(l,r.attr(l))}var q=r.data(l).split(","),p=new Array(q.length);for(var h=0;h<p.length;++h){if(h%2===0){p[h]=parseInt(((q[h]/n)*100)*f)}else{p[h]=parseInt(((q[h]/j)*100)*k)}}r.attr(l,p.toString())})}).attr("src",d.attr("src"))})};a(window).resize(b).trigger("resize");return this}})(jQuery);


 $(function(){
     $("#quote").typed({
       strings: ["INTER DEPARTMENTAL SPORTS EVENT_"],
       typeSpeed: 50,
       loop: true
     });
 });
     </script>
  </body>

</html>
