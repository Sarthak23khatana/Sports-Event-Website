<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IDSE</title>
    <link rel="stylesheet" href="css/style.css">
    <!-- Compiled and minified CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-rc.2/css/materialize.min.css">
    <!--font-->
    <link href="https://fonts.googleapis.com/css?family=Quicksand|Cabin+Sketch" rel="stylesheet">
    <!--icons-->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!--typed.js-->
    <script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.9"></script>

    <script src="js/SmoothScroll.min.js"></script>
    <script type="application/x-javascript">
        <!-- To Scroll To Top on Refresh -->
               addEventListener("load", function() {
                   setTimeout(hideURLbar, 0);
               }, false);

               function hideURLbar() {
                   window.scrollTo(0, 1);
               }

    </script>

</head>
<body>


    <!--Landing page-->
    <div class="row mt" id="No_margin">
        <div class="col s12 m12 l12 LandingBg center-align">
            <span class="logo"> <img class="responsive-img" src="img/AKGEC.png" alt=""> </span>
            <div id="akgec">
                AJAY KUMAR GARG ENGINEERING COLLEGE
            </div>
            <div class="center-align" id="Main_text">
                <div class="typing-animation"><span id="quote"></span></div><!--typed.js-->
            </div>
            <div>
                <a class="waves-effect btn-large pulse Register_btn scroll" id="main_btn" href="#REGISTERbUTTON">Register</a>
            </div>
        </div>
    </div>
    <!--about idse-->
    <div class="row mt">
        <div class="card-panel col s12 m10 l10 offset-l1 offset-m1 white-text z-depth-2 ">
            <h4 class="center-align">About IDSE</h4>
            <div class="divider"></div>
            <p class="about_text">
                INTER-DEPARTMENTAL SPORTS EVENT (IDSE) is the Annual Sports Meet of Ajay Kumar Garg Engineering College, Ghaziabad. The aim is to ensure the physical development of the students, along with the holistic and all-round development.
                The event comprises of the following 7 contingents: ME, CS, ECE, IT, EN, CE+EI, MBA+MCA.
            </p>
        </div>
    </div>


    <!--Team 2nd-->
    <div class="row grey darken-3 BorderLeftB">
        <div class="row">
            <!--dean sir-->
            <div class="col s12 m6 l6">
                <h4 class="center-align" id="dean">Dean Students Welfare</h4>
            </div>
            <div class="col s12 m6 l6">
                <div class="row">
                    <div class="col s12 m4 l4 offset-m4 offset-l4 mt5 BorderLeftB">
                        <div class="card-image waves-effect waves-block waves-dark">
                            <img class="activator responsive-img" src="img/parashar.jpg">
                        </div>
                        <div class="card-content z-depth-1 center-align whitebg">
                            <span class="card-title grey-text text-darken-4 center-align">Prof. V K Parashar</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">

            <div class="row">
                <!--sport officer -->
                <div class="col s12 m6 l6">
                    <h4 class="center-align" id="dean">Sports Officer</h4>
                </div>
                <div class="col s12 m6 l6">
                    <div class="row">
                        <div class="col s12 m4 l4 offset-m4 offset-l4 mt5 BorderLeftB">
                            <div class="card-image waves-effect waves-block waves-dark">
                                <img class="activator responsive-img" src="img/Pratap.jpg">
                            </div>
                            <div class="card-content z-depth-1 center-align whitebg">
                                <span class="card-title grey-text text-darken-4 center-align">Mr. Pratap</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <!--organizing head -->
                <div class="col s12 m6 l6 ">
                    <h4 class="center-align" id="dean">Organising Head</h4>
                </div>
                <div class="col s12 m6 l6">
                    <div class="row">
                        <div class="col s12 m4 l4 offset-m4 offset-l4 mt5 BorderLeftB">
                            <div class="card-image waves-effect waves-block waves-dark">
                                <img class="activator responsive-img" src="img/Yash.jpg">
                            </div>
                            <div class="card-content z-depth-1 center-align whitebg">
                                <span class="card-title grey-text text-darken-4 center-align">Yash Saxena</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt grey darken-3" id="webteam_row">
                <!--captains-->
                <div class="col s12 m4 offset-m1 l4 offset-l1 ">
                    <h5 class="center-align" id="dean">College Captains</h5>
                </div>
                <div class="col s6 m3 l3 ">
                    <!--Member1-->
                    <div class="card RespMed RespLg SmallResp">
                        <div class="card-image waves-effect ">
                            <img class="activator responsive-img" src="img/Harshita.jpg">
                        </div>
                        <div class="card-content white center-align">
                            <span class="card-title activator grey-text text-darken-4">Harshita Mishra</span>
                        </div>
                    </div>
                </div>
                <div class="col s6 m3 l3 ">
                    <!--Member2-->
                    <div class="card RespMed RespLg">
                        <div class="card-image waves-effect">
                            <img class="activator responsive-img" src="img/Anubhav.jpg">
                        </div>
                        <div class="card-content white center-align">
                            <span class="card-title activator grey-text text-darken-4">Anubhav Panwar</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt grey darken-3" id="webteam_row">
                <!--web team-->
                <div class="col s12 m4 offset-m1 l4 offset-l1 ">
                    <h5 class="center-align" id="dean">Web Team</h5>
                </div>
                <div class="col s6 m3 l3 ">
                    <!--Member1-->
                    <div class="card RespMed RespLg SmallResp">
                        <div class="card-image waves-effect ">
                            <img class="activator responsive-img" src="img/tarun.jpg">
                        </div>
                        <div class="card-content white center-align">
                            <span class="card-title activator grey-text text-darken-4">Tarun Gupta</span>
                        </div>
                    </div>
                </div>
                <div class="col s6 m3 l3 ">
                    <!--Member2-->
                    <div class="card RespMed RespLg">
                        <div class="card-image waves-effect">
                            <img class="activator responsive-img" src="img/sarthak2.jpg">
                        </div>
                        <div class="card-content white center-align">
                            <span class="card-title activator grey-text text-darken-4">Sarthak khatana</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--form-->
    <div class="row mt center-align registerHead grey darken-3 BorderLeftB" id="REGISTERbUTTON">
        <h5>Registration Form</h5>
    </div>
    <div class="container grey lighten-5 z-depth-1">
        <div class="row mt">
            <!--register form -->
            <form class="col s12">
                <div class="row">
                    <div class="input-field col s8 offset-s2 grey-text lighten-2">
                        <i class="material-icons prefix">account_circle</i>
                        <input type="text" id="name" required="required" onfocus="changeName();" onfocusout="nameTyped();" />
                        <label class="control-label" for="input">Full Name</label><i class="bar"></i>
                        <span class="error" id="hiddenName" style="display: none;">Name is required</span>
                    </div>

                    <div class="input-field col s8 offset-s2 grey-text">
                        <i class="material-icons prefix">call</i>
                        <input type="text" id="contact" required="required" onfocus="changeContact();" onfocusout="contactTyped();" />
                        <label class="control-label" for="input">Contact Number</label><i class="bar"></i>
                        <span class="error" id="hiddenContact" style="display: none;">Contact Number is required</span>
                        <span class="error" id="hiddenRegexPhone" style="display: none;">Invalid phone number</span>
                    </div>
                    <div class="input-field col s8 offset-s2 grey-text">
                        <i class="material-icons prefix">person_pin</i>
                        <input type="text" id="stdnumber" required="required" onfocus="changeStdNumber();" onfocusout="stdNumberTyped();" />
                        <label class="control-label" for="input">Student Number</label><i class="bar"></i>
                        <span class="error" id="hiddenstdnumber" style="display: none;">Student Number is required</span>
                        <span class="error" id="hiddenRegexStudent" style="display: none;">Invalid Student number</span>
                    </div>
                    <div class="input-field col s8 offset-s2 grey-text ">
                        <i class="material-icons prefix">domain</i>

                        <select id="branch" onchange="selectBranch();">
                            <option value="" disabled selected>Branch</option>
                            <option>ME</option>
                            <option>CS</option>
                            <option>CE</option>
                            <option>IT</option>
                            <option>EI</option>
                            <option>EN</option>
                            <option>EC</option>
                            <option>MBA</option>
                            <option>MCA</option>
                        </select>

                        <label class="control-label" for="select">Branch</label><i class="bar"></i>
                        <span class="error" id="hiddenBranch" style="display: none;">Select Branch</span>
                    </div>
                    <div class="input-field col s8 offset-s2 grey-text">
                        <i class="material-icons prefix">account_balance</i>

                        <select id="year">
                            <option value="" disabled selected>Year</option>
                            <option>1</option>
                            <option>2</option>
                            <option>3</option>
                            <option>4</option>
                        </select>

                        <label class="control-label" for="select">Year</label><i class="bar"></i>
                        <span class="error" id="hiddenYear" style="display: none;">Select Year</span>
                    </div>

                    <div class="input-field col s8 offset-s2 grey-text">
                        <i class="material-icons prefix">wc</i>
                        <select id="gender" onchange="selectGender();">
                            <option value="" disabled selected>Gender</option>
                            <option>Male</option>
                            <option>Female</option>
                        </select>

                        <label class="control-label" for="select">Gender</label><i class="bar"></i>
                        <span class="error" id="hiddenGender" style="display: none;">Select Gender</span>
                    </div>


                    <div class="input-field col s8 offset-s2 grey-text">
                        <select id="checkboxing" multiple>
                            <option>Cricket</option>
                            <option>Football</option>
                            <option>Badminton</option>
                            <option>Athletics</option>
                            <option>kabaddi</option>
                            <option>Pool</option>
                            <option>Power Lifting</option>
                            <option>Valleyball</option>
                            <option>Basketball</option>
                            <option>Table Tennis</option>
                            <option>Kho-Kho</option>
                            <option>Tug of War</option>
                            <option>Chess</option>
                            <option>Carrom</option>
                            <option>Obstacle Race</option>
                        </select>
                        <label>Interested Sports</label>

                    </div>
                    <div class="col s8 offset-s2 grey-text">
                        <p>
                            <label>
                                <input class="checkbox-color" id="accomodation" type="checkbox" />
                                <span>Hosteler</span>
                            </label>
                        </p>
                    </div>
                    <div class="col s12 center-align">

                        <button class="btn waves-effect waves-light waves-effect Register_btn " onclick="SubmitForm();" type="submit">
                            Submit
                            <i class="material-icons right">send</i>

                        </button>

                    </div>
                </div>

                <!--Loader-->

                <img id="process" class="modal" src="img/Loader.gif" style="display:block; margin: 0 auto; width:200px; margin-top:15%;">

                <div id="messagemodal" class="modal">
                    <div class="modal-content" id="modalBody" style="padding:7vh 7vw; background-color:#ffffff; color:#00bcd4; font-weight:bold;">
                        &nbsp;
                    </div>

                </div>
            </form>
        </div>
    </div>



    <!--powered by-->
    <div class="row mt grey darken-4 white-text" id="footer">
        <div class="right">powered by <b class="SI">SOFTWARE INCUBATOR</b></div>
    </div>
    <!--JavaScript at end of body for optimized loading-->
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"
            integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <!-- Compiled and minified JavaScript -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/owl-carousel/1.3.3/owl.carousel.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-rc.2/js/materialize.min.js"></script>
    <script>
        $(document).ready(function () {
            $('select').formSelect();
        });

    </script>
    <script>
        //smooth scroll
        jQuery(document).ready(function ($) {
            $(".scroll").click(function (event) {
                event.preventDefault();
                $('html,body').animate({
                    scrollTop: $(this.hash).offset().top
                }, 1800);
            });
        });
    </script>
    <script type="text/javascript">
        var SubmitForm = function () {
            var Name = $("#name").val().toString();
            var StudentNo = $("#stdnumber").val().toString();
            var ContactNumber = $("#contact").val().toString();
            var Branch = $("#branch").val();
            var Year = $("#year").val();
            var Hosteler = $("#accomodation").val();
            var Gender = $("#gender").val();
            var SportsInterested = "";

            $('#checkboxing').each(function () {
                SportsInterested += $(this).val() + ",";
            });

            var hostlerChecked = document.getElementById('accomodation');
            if (hostlerChecked.checked) Hosteler = "yes";
            else Hosteler = "no";
            console.log(Name);
            console.log(StudentNo);
            console.log(ContactNumber);
            console.log(Branch);
            console.log(Year);
            console.log(Hosteler);
            console.log(Gender);
            console.log(SportsInterested);

            if (Name == "") {
                $("#hiddenName").show();

                if (StudentNo == "")
                    $("#hiddenstdnumber").show();

                if (ContactNumber == "")
                    $("#hiddenContact").show();

                if (Branch == null)
                    $("#hiddenBranch").show();

                if (Year == null)
                    $("#hiddenYear").show();

                if (Gender == null)
                    $("#hiddenGender").show();

                if (SportsInterested == "")
                    $("#hiddenSport").show();


                return;
            }
            if (ContactNumber == "") {
                $("#hiddenContact").show();

                if (StudentNo == "")
                    $("#hiddenstdnumber").show();

                if (Branch == null)
                    $("#hiddenBranch").show();

                if (Year == null)
                    $("#hiddenYear").show();

                if (Gender == null)
                    $("#hiddenGender").show();

                if (SportsInterested == "")
                    $("#hiddenSport").show();

                return;
            }
            if (StudentNo == "") {
                $("#hiddenstdnumber").show();

                if (Branch == null)
                    $("#hiddenBranch").show();

                if (Year == null)
                    $("#hiddenYear").show();


                if (Gender == null)
                    $("#hiddenGender").show();

                if (SportsInterested == "")
                    $("#hiddenSport").show();

                return;
            }


            if (Branch == null) {
                $("#hiddenBranch").show();

                if (Year == null)
                    $("#hiddenYear").show();


                if (Gender == null)
                    $("#hiddenGender").show();

                if (SportsInterested == "")
                    $("#hiddenSport").show();


                return;
            }

            if (Year == null) {
                $("#hiddenYear").show();

                if (Gender == null)
                    $("#hiddenGender").show();

                if (SportsInterested == "")
                    $("#hiddenSport").show();


                return;
            }

            if (Gender == null) {
                $("#hiddenGender").show();

                if (SportsInterested == "")
                    $("#hiddenSport").show();

                return;
            }

            if (SportsInterested == "")
            { $("#hiddenSport").show(); return; }



            var data = {
                'Name': Name.toString(),
                'StudentNo': StudentNo.toString(),
                'Branch': Branch.toString(),
                'Year': Year.toString(),
                'ContactNumber': ContactNumber.toString(),
                'Hosteler': Hosteler.toString(),
                'SportsInterested': SportsInterested.toString(),
                'Gender': Gender.toString(),
            };

            // initialize all modals
            $('.modal').modal({
                dismissible: true
            });

            $('#process').modal('open');

            $.ajax({
                url: "http://localhost:10591/api/StudentRegister",
                type: "POST",
                dataType: "json",
                data: data,
                success: function () {
                    console.log("success");
                    $('#process').modal('close');
                    document.getElementById('modalBody').innerHTML = "You are successfully registered.";
                    $('#messagemodal').modal('open');

                    setTimeout(function () {
                        window.location.reload();
                    }, 2000);
                },
                error: function () {
                    console.log("failure");
                    $('#process').modal('close');
                    document.getElementById('modalBody').innerHTML = "Registrations are closed.";
                    $('#messagemodal').modal('open');
                }
            });
        }

        var changeName = function () {
            if ($("#name").val() != "")
                $("#hiddenName").hide();
        }
        var nameTyped = function () {
            if ($("#name").val() != "")
                $("#hiddenName").hide();
            else
                $("#hiddenName").show();
        }
        var changeContact = function () {
            if ($("#contact").val() != "")
                $("#hiddenContact").hide();
        }
        var contactTyped = function () {
            if ($("#contact").val() != "") {
                $("#hiddenContact").hide();
                var pattern = /^[6-9][0-9]{9}$/;
                var phone = $("#contact").val().toString();
                if (!(pattern).test(phone))
                    $("#hiddenRegexPhone").show();
                else
                    $("#hiddenRegexPhone").hide();

            }
            else
                $("#hiddenContact").show();
        }
        var changeStdNumber = function () {
            if ($("#stdnumber").val() != "")
                $("#hiddenstdnumber").hide();
        }
        var stdNumberTyped = function () {
            if ($("#stdnumber").val() != "") {
                $("#hiddenstdnumber").hide();
                var pattern2 = /^[1][5-8]\d{5}[-]?[Dd]?$/;
                var student = $("#stdnumber").val().toString();
                if (!(pattern2).test(student))
                    $("#hiddenRegexStudent").show();
                else
                    $("#hiddenRegexStudent").hide();
            }
            else
                $("#hiddenstdnumber").show();
        }
        var selectGender = function () {
            if ($("#gender").val() != null)
                $("#hiddenGender").hide();
            else
                $("#hiddenGender").show();
        }

        var selectBranch = function () {
            if ($("#branch").val() != null)
                $("#hiddenBranch").hide();
            else
                $("#hiddenBranch").show();
        }

        var selectYear = function () {
            if ($("#year").val() != null)
                $("#hiddenYear").hide();
            else
                $("#hiddenYear").show();
        }

    </script>
    <script type="text/javascript">
        // The MIT License (MIT)

        // Typed.js | Copyright (c) 2014 Matt Boldt | www.mattboldt.com

        // Permission is hereby granted, free of charge, to any person obtaining a copy
        // of this software and associated documentation files (the "Software"), to deal
        // in the Software without restriction, including without limitation the rights
        // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        // copies of the Software, and to permit persons to whom the Software is
        // furnished to do so, subject to the following conditions:

        // The above copyright notice and this permission notice shall be included in
        // all copies or substantial portions of the Software.

        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        // THE SOFTWARE.




        ! function ($) {

            "use strict";

            var Typed = function (el, options) {

                // chosen element to manipulate text
                this.el = $(el);

                // options
                this.options = $.extend({}, $.fn.typed.defaults, options);

                // attribute to type into
                this.isInput = this.el.is('input');
                this.attr = this.options.attr;

                // show cursor
                this.showCursor = this.isInput ? false : this.options.showCursor;

                // text content of element
                this.elContent = this.attr ? this.el.attr(this.attr) : this.el.text()

                // html or plain text
                this.contentType = this.options.contentType;

                // typing speed
                this.typeSpeed = this.options.typeSpeed;

                // add a delay before typing starts
                this.startDelay = this.options.startDelay;

                // backspacing speed
                this.backSpeed = this.options.backSpeed;

                // amount of time to wait before backspacing
                this.backDelay = this.options.backDelay;

                // div containing strings
                this.stringsElement = this.options.stringsElement;

                // input strings of text
                this.strings = this.options.strings;

                // character number position of current string
                this.strPos = 0;

                // current array position
                this.arrayPos = 0;

                // number to stop backspacing on.
                // default 0, can change depending on how many chars
                // you want to remove at the time
                this.stopNum = 0;

                // Looping logic
                this.loop = this.options.loop;
                this.loopCount = this.options.loopCount;
                this.curLoop = 0;

                // for stopping
                this.stop = false;

                // custom cursor
                this.cursorChar = this.options.cursorChar;

                // shuffle the strings
                this.shuffle = this.options.shuffle;
                // the order of strings
                this.sequence = [];

                // All systems go!
                this.build();
            };

            Typed.prototype = {

                constructor: Typed

                ,
                init: function () {
                    // begin the loop w/ first current string (global self.strings)
                    // current string will be passed as an argument each time after this
                    var self = this;
                    self.timeout = setTimeout(function () {
                        for (var i = 0; i < self.strings.length; ++i) self.sequence[i] = i;

                        // shuffle the array if true
                        if (self.shuffle) self.sequence = self.shuffleArray(self.sequence);

                        // Start typing
                        self.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);
                    }, self.startDelay);
                }

                ,
                build: function () {
                    var self = this;
                    // Insert cursor
                    if (this.showCursor === true) {
                        this.cursor = $("<span class=\"typed-cursor\">" + this.cursorChar + "</span>");
                        this.el.after(this.cursor);
                    }
                    if (this.stringsElement) {
                        self.strings = [];
                        this.stringsElement.hide();
                        var strings = this.stringsElement.find('p');
                        $.each(strings, function (key, value) {
                            self.strings.push($(value).html());
                        });
                    }
                    this.init();
                }

                // pass current string state to each function, types 1 char per call
                ,
                typewrite: function (curString, curStrPos) {
                    // exit when stopped
                    if (this.stop === true) {
                        return;
                    }

                    // varying values for setTimeout during typing
                    // can't be global since number changes each time loop is executed
                    var humanize = Math.round(Math.random() * (100 - 30)) + this.typeSpeed;
                    var self = this;

                    // ------------- optional ------------- //
                    // backpaces a certain string faster
                    // ------------------------------------ //
                    // if (self.arrayPos == 1){
                    //  self.backDelay = 50;
                    // }
                    // else{ self.backDelay = 500; }

                    // contain typing function in a timeout humanize'd delay
                    self.timeout = setTimeout(function () {
                        // check for an escape character before a pause value
                        // format: \^\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^
                        // single ^ are removed from string
                        var charPause = 0;
                        var substr = curString.substr(curStrPos);
                        if (substr.charAt(0) === '^') {
                            var skip = 1; // skip atleast 1
                            if (/^\^\d+/.test(substr)) {
                                substr = /\d+/.exec(substr)[0];
                                skip += substr.length;
                                charPause = parseInt(substr);
                            }

                            // strip out the escape character and pause value so they're not printed
                            curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);
                        }

                        if (self.contentType === 'html') {
                            // skip over html tags while typing
                            var curChar = curString.substr(curStrPos).charAt(0)
                            if (curChar === '<' || curChar === '&') {
                                var tag = '';
                                var endTag = '';
                                if (curChar === '<') {
                                    endTag = '>'
                                } else {
                                    endTag = ';'
                                }
                                while (curString.substr(curStrPos).charAt(0) !== endTag) {
                                    tag += curString.substr(curStrPos).charAt(0);
                                    curStrPos++;
                                }
                                curStrPos++;
                                tag += endTag;
                            }
                        }

                        // timeout for any pause after a character
                        self.timeout = setTimeout(function () {
                            if (curStrPos === curString.length) {
                                // fires callback function
                                self.options.onStringTyped(self.arrayPos);

                                // is this the final string
                                if (self.arrayPos === self.strings.length - 1) {
                                    // animation that occurs on the last typed string
                                    self.options.callback();

                                    self.curLoop++;

                                    // quit if we wont loop back
                                    if (self.loop === false || self.curLoop === self.loopCount)
                                        return;
                                }

                                self.timeout = setTimeout(function () {
                                    self.backspace(curString, curStrPos);
                                }, self.backDelay);
                            } else {

                                /* call before functions if applicable */
                                if (curStrPos === 0)
                                    self.options.preStringTyped(self.arrayPos);

                                // start typing each new char into existing string
                                // curString: arg, self.el.html: original text inside element
                                var nextString = curString.substr(0, curStrPos + 1);
                                if (self.attr) {
                                    self.el.attr(self.attr, nextString);
                                } else {
                                    if (self.isInput) {
                                        self.el.val(nextString);
                                    } else if (self.contentType === 'html') {
                                        self.el.html(nextString);
                                    } else {
                                        self.el.text(nextString);
                                    }
                                }

                                // add characters one by one
                                curStrPos++;
                                // loop the function
                                self.typewrite(curString, curStrPos);
                            }
                            // end of character pause
                        }, charPause);

                        // humanized value for typing
                    }, humanize);

                }

                ,
                backspace: function (curString, curStrPos) {
                    // exit when stopped
                    if (this.stop === true) {
                        return;
                    }

                    // varying values for setTimeout during typing
                    // can't be global since number changes each time loop is executed
                    var humanize = Math.round(Math.random() * (100 - 30)) + this.backSpeed;
                    var self = this;

                    self.timeout = setTimeout(function () {

                        // ----- this part is optional ----- //
                        // check string array position
                        // on the first string, only delete one word
                        // the stopNum actually represents the amount of chars to
                        // keep in the current string. In my case it's 14.
                        // if (self.arrayPos == 1){
                        //  self.stopNum = 14;
                        // }
                        //every other time, delete the whole typed string
                        // else{
                        //  self.stopNum = 0;
                        // }

                        if (self.contentType === 'html') {
                            // skip over html tags while backspacing
                            if (curString.substr(curStrPos).charAt(0) === '>') {
                                var tag = '';
                                while (curString.substr(curStrPos).charAt(0) !== '<') {
                                    tag -= curString.substr(curStrPos).charAt(0);
                                    curStrPos--;
                                }
                                curStrPos--;
                                tag += '<';
                            }
                        }

                        // ----- continue important stuff ----- //
                        // replace text with base text + typed characters
                        var nextString = curString.substr(0, curStrPos);
                        if (self.attr) {
                            self.el.attr(self.attr, nextString);
                        } else {
                            if (self.isInput) {
                                self.el.val(nextString);
                            } else if (self.contentType === 'html') {
                                self.el.html(nextString);
                            } else {
                                self.el.text(nextString);
                            }
                        }

                        // if the number (id of character in current string) is
                        // less than the stop number, keep going
                        if (curStrPos > self.stopNum) {
                            // subtract characters one by one
                            curStrPos--;
                            // loop the function
                            self.backspace(curString, curStrPos);
                        }
                            // if the stop number has been reached, increase
                            // array position to next string
                        else if (curStrPos <= self.stopNum) {
                            self.arrayPos++;

                            if (self.arrayPos === self.strings.length) {
                                self.arrayPos = 0;

                                // Shuffle sequence again
                                if (self.shuffle) self.sequence = self.shuffleArray(self.sequence);

                                self.init();
                            } else
                                self.typewrite(self.strings[self.sequence[self.arrayPos]], curStrPos);
                        }

                        // humanized value for typing
                    }, humanize);

                }
                /**
                 * Shuffles the numbers in the given array.
                 * @param {Array} array
                 * @returns {Array}
                 */
                , shuffleArray: function (array) {
                    var tmp, current, top = array.length;
                    if (top) while (--top) {
                        current = Math.floor(Math.random() * (top + 1));
                        tmp = array[current];
                        array[current] = array[top];
                        array[top] = tmp;
                    }
                    return array;
                }

                // Start & Stop currently not working

                // , stop: function() {
                //     var self = this;

                //     self.stop = true;
                //     clearInterval(self.timeout);
                // }

                // , start: function() {
                //     var self = this;
                //     if(self.stop === false)
                //        return;

                //     this.stop = false;
                //     this.init();
                // }

                // Reset and rebuild the element
                ,
                reset: function () {
                    var self = this;
                    clearInterval(self.timeout);
                    var id = this.el.attr('id');
                    this.el.after('<span id="' + id + '"/>')
                    this.el.remove();
                    if (typeof this.cursor !== 'undefined') {
                        this.cursor.remove();
                    }
                    // Send the callback
                    self.options.resetCallback();
                }

            };

            $.fn.typed = function (option) {
                return this.each(function () {
                    var $this = $(this),
                        data = $this.data('typed'),
                        options = typeof option == 'object' && option;
                    if (!data) $this.data('typed', (data = new Typed(this, options)));
                    if (typeof option == 'string') data[option]();
                });
            };

            $.fn.typed.defaults = {
                strings: ["These are the default values...", "You know what you should do?", "Use your own!", "Have a great day!"],
                stringsElement: null,
                // typing speed
                typeSpeed: 0,
                // time before typing starts
                startDelay: 0,
                // backspacing speed
                backSpeed: 0,
                // shuffle the strings
                shuffle: false,
                // time before backspacing
                backDelay: 500,
                // loop
                loop: false,
                // false = infinite
                loopCount: false,
                // show cursor
                showCursor: true,
                // character for cursor
                cursorChar: "<span class='cursor'>|</span>",
                // attribute to type (null == text)
                attr: null,
                // either html or text
                contentType: 'html',
                // call when done callback function
                callback: function () { },
                // starting callback function before each string
                preStringTyped: function () { },
                //callback for every typed string
                onStringTyped: function () { },
                // callback for reset
                resetCallback: function () { }
            };


        }(window.jQuery);

        /*
        * Copyright (c) 2013 Matt Stow
        * https://github.com/stowball/jQuery-rwdImageMaps
        * http://mattstow.com
        * Licensed under the MIT license
        */
        ; (function (a) { a.fn.rwdImageMaps = function () { var c = this; var b = function () { c.each(function () { if (typeof (a(this).attr("usemap")) == "undefined") { return } var e = this, d = a(e); a("<img />").load(function () { var g = "width", m = "height", n = d.attr(g), j = d.attr(m); if (!n || !j) { var o = new Image(); o.src = d.attr("src"); if (!n) { n = o.width } if (!j) { j = o.height } } var f = d.width() / 100, k = d.height() / 100, i = d.attr("usemap").replace("#", ""), l = "coords"; a('map[name="' + i + '"]').find("area").each(function () { var r = a(this); if (!r.data(l)) { r.data(l, r.attr(l)) } var q = r.data(l).split(","), p = new Array(q.length); for (var h = 0; h < p.length; ++h) { if (h % 2 === 0) { p[h] = parseInt(((q[h] / n) * 100) * f) } else { p[h] = parseInt(((q[h] / j) * 100) * k) } } r.attr(l, p.toString()) }) }).attr("src", d.attr("src")) }) }; a(window).resize(b).trigger("resize"); return this } })(jQuery);


        $(function () {
            $("#quote").typed({
                strings: ["INTER DEPARTMENTAL SPORTS EVENT_"],
                typeSpeed: 50,
                loop: true
            });
        });
    </script>
</body>

</html>
